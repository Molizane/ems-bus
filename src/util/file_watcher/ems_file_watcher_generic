-include("include/ems_config.hrl").
-include("include/ems_schema.hrl").

-behavior(gen_server). 

%% Server API
-export([start/1, stop/0]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/1, handle_info/2, terminate/2, code_change/3]).

-export([watch/2, unwatch/1]).

% State of server
-record(state, {}).

-define(TIMEOUT_FILE_WATCHER, 5000).

%%====================================================================
%% Server API
%%====================================================================

start(Service = #service{name = Name}) -> 
 	ServerName = list_to_atom(binary_to_list(Name)),
    gen_server:start_link({local, ServerName}, ?MODULE, Service, []).
 
stop() ->
    gen_server:cast(?MODULE, shutdown).


%%====================================================================
%% Client API
%%====================================================================

watch(Path, Fun) -> gen_server:cast(?MODULE, {watch, Path, Fun}).

unwatch(Path) -> gen_server:cast(?MODULE, {unwatch, Path}).



%%====================================================================
%% gen_server callbacks
%%====================================================================

init(_Service) ->
	ets:new(ems_file_watcher_watch, [named_table, public]),
    {ok, #state{}}.


handle_cast(shutdown, State) ->
    {stop, normal, State};

handle_cast({watch, Path, Fun}, State) ->
	do_watch(Path, Fun),
	{noreply, State, 0};

handle_cast({unwatch, Path}, State) ->
	do_unwatch(Path),
	{noreply, State, 0}.

handle_call(_Msg, _From, State) ->
	{reply, _Msg, State}.

handle_info(monitor, State) ->
	do_monitor(),
	erlang:send_after(?TIMEOUT_FILE_WATCHER, self(), monitor),
	{noreply, State};

handle_info(_Msg, State) ->
	{noreply, State, 0}.

handle_info(State) ->
   {noreply, State}.

terminate(_Reason, _State) ->
	application:stop(inotify),
	ok.

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.



%%====================================================================
%% Internal functions
%%====================================================================



do_watch(Path, Fun) ->
	case ets:lookup(ems_file_watcher_watch, Path) of
		[] -> 
			Path2 = ems_util:remove_ult_backslash_url(Path),
			LastModified = filelib:last_modified(Path),
			ets:insert(ems_file_watcher_watch, {Path2, Fun, LastModified}),
			erlang:send_after(?TIMEOUT_FILE_WATCHER, self(), monitor);
		[_] -> ok
	end.

do_unwatch(Path) ->
	Path2 = ems_util:remove_ult_backslash_url(Path),
	ets:delete(ems_file_watcher_watch, Path2),
	case ets:info(ems_file_watcher_watch, size) > 0 of
		true -> erlang:send_after(?TIMEOUT_FILE_WATCHER, self(), monitor);
		false -> ok
	end,
	ok.
	
do_monitor() ->
	Paths = ets:match(ems_file_watcher_watch, '$1'),
	do_monitor(Paths).
	
do_monitor([]) -> ok;
do_monitor([[{Path, Fun, LastModified}]|T]) ->
	LastModified2 = filelib:last_modified(Path),
	case LastModified == 0 of
		true ->
			case LastModified2 =/= 0 of
				true -> 
					ets:insert(ems_file_watcher_watch, {Path, Fun, LastModified2}),
					spawn(fun() -> Fun(new, Path) end);
				false -> ok
			end;
		false ->
			case LastModified2 == 0 of
				true -> 
					ets:insert(ems_file_watcher_watch, {Path, Fun, LastModified2}),
					spawn(fun() -> Fun(delete, Path) end);
				false ->
					case calendar:datetime_to_gregorian_seconds(LastModified2) > calendar:datetime_to_gregorian_seconds(LastModified) of
						true -> 
							ets:insert(ems_file_watcher_watch, {Path, Fun, LastModified2}),
							spawn(fun() -> Fun(change, Path) end);
						false -> ok
					end
			end
	end,
	do_monitor(T).	


